package HTMLExtractor;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.json.JSONArray;
import org.json.JSONObject;

import HTMLExtractor.MalwareDomainListExtractor;

import org.junit.Test;

import static org.junit.Assert.*;

/**
 * Unit test for Malware Domain List extractor.
 */
public class MalwareDomainListExtractorTest{
	
	private Map<String,String> loadContent(String entryName, boolean localMode) throws IOException{
		Map<String,String> pageContent = new HashMap<String,String>();
		String filePath = "./testData/malwaredomainlist/";
		Charset charset = Charset.defaultCharset();
		if(localMode){
			File infoFD = new File(filePath + entryName);
			String content = FileUtils.readFileToString(infoFD, charset);
			pageContent.put("content", content);
		}
		else{
			URL u;
			u = new URL("http://www.malwaredomainlist.com/mdl.php?search="+entryName);
			pageContent.put("content", IOUtils.toString(u));
		}
		return pageContent;
	}
	
	/**
	 * Test with "alsoknowsit.com" sample data
	 */
	@Test
	public void test_alsoknowsit_com()
	{
		String entryName = "alsoknowsit.com";
		boolean localMode = true;
		String content;
		
		try {
			Map<String,String> pageContent = loadContent(entryName, localMode);
			content = pageContent.get("content");
			
			MalwareDomainListExtractor mdlExt = new MalwareDomainListExtractor(content);
			JSONObject obj = mdlExt.getGraph();
		    
		    //System.out.println(obj.toString(2));

		    JSONArray verts = obj.getJSONArray("vertices");
		    JSONArray edges = obj.getJSONArray("edges");
		    
		    String expectedVerts = "["+
		    		"    {"+
		    		"      'urlsUsed': ['alsoknowsit.com/wp-files/config.bin'],"+
		    		"      'vertexType': 'malware',"+
		    		"      '_type': 'vertex',"+
		    		"      'source': 'MalwareDomainList',"+
		    		"      '_id': 'MalwareDomainList_alsoknowsit.com',"+
		    		"      'description': 'Zeus config file',"+
		    		"      'name': 'MalwareDomainList_alsoknowsit.com',"+
		    		"      'date': '1409649060000'"+
		    		"    },"+
		    		"    {"+
		    		"      'vertexType': 'DNSName',"+
		    		"      '_type': 'vertex',"+
		    		"      'source': 'MalwareDomainList',"+
		    		"      '_id': 'alsoknowsit.com',"+
		    		"      'name': 'alsoknowsit.com',"+
		    		"      'description': 'alsoknowsit.com'"+
		    		"    },"+
		    		"    {"+
		    		"      'vertexType': 'DNSName',"+
		    		"      '_type': 'vertex',"+
		    		"      'source': 'MalwareDomainList',"+
		    		"      '_id': 'kvm.arconet.ee.',"+
		    		"      'name': 'kvm.arconet.ee.',"+
		    		"      'description': 'kvm.arconet.ee.'"+
		    		"    },"+
		    		"    {"+
		    		"      'vertexType': 'ip',"+
		    		"      '_type': 'vertex',"+
		    		"      'source': 'MalwareDomainList',"+
		    		"      '_id': '80.250.114.239',"+
		    		"      'name': '80.250.114.239',"+
		    		"      'description': '80.250.114.239'"+
		    		"    },"+
		    		"    {"+
		    		"      'vertexType': 'Address',"+
		    		"      '_type': 'vertex',"+
		    		"      'source': 'MalwareDomainList',"+
		    		"      '_id': '80.250.114.239:80',"+
		    		"      'name': '80.250.114.239:80',"+
		    		"      'description': '80.250.114.239, port 80'"+
		    		"    }"+
		    		"  ]";
		    String expectedEdges = "["+
		    		"    {"+
		    		"      '_type': 'edge',"+
		    		"      'outVType': 'malware',"+
		    		"      'source': 'MalwareDomainList',"+
		    		"      '_id': 'MalwareDomainList_alsoknowsit.com_to_80.250.114.239:80',"+
		    		"      '_outV': 'MalwareDomainList_alsoknowsit.com',"+
		    		"      '_label': 'communicatesWith',"+
		    		"      'inVType': 'address',"+
		    		"      '_inV': '80.250.114.239:80'"+
		    		"    },"+
		    		"    {"+
		    		"      '_type': 'edge',"+
		    		"      'outVType': 'address',"+
		    		"      'source': 'MalwareDomainList',"+
		    		"      '_id': '80.250.114.239:80_to_80.250.114.239',"+
		    		"      '_outV': '80.250.114.239:80',"+
		    		"      '_label': 'hasIP',"+
		    		"      'inVType': 'ip',"+
		    		"      '_inV': '80.250.114.239'"+
		    		"    },"+
		    		"    {"+
		    		"      '_type': 'edge',"+
		    		"      'reverse': false,"+
		    		"      'outVType': 'address',"+
		    		"      'source': 'MalwareDomainList',"+
		    		"      '_id': '80.250.114.239:80_to_alsoknowsit.com',"+
		    		"      '_outV': '80.250.114.239:80',"+
		    		"      '_label': 'hasDNSName',"+
		    		"      'inVType': 'DNSName',"+
		    		"      '_inV': 'alsoknowsit.com'"+
		    		"    },"+
		    		"    {"+
		    		"      '_type': 'edge',"+
		    		"      'reverse': true,"+
		    		"      'outVType': 'address',"+
		    		"      'source': 'MalwareDomainList',"+
		    		"      '_id': '80.250.114.239:80_to_kvm.arconet.ee.',"+
		    		"      '_outV': '80.250.114.239:80',"+
		    		"      '_label': 'hasDNSName',"+
		    		"      'inVType': 'DNSName',"+
		    		"      '_inV': 'kvm.arconet.ee.'"+
		    		"    }"+
		    		"  ]";
		    
		    boolean match = HTMLExtractor.deepCompareJSONArraysUnordered(verts, new JSONArray(expectedVerts));
		    if(!match){
		    	System.out.println("Vertex list did not match!  result was: \n" + verts);
		    }
		    assertTrue( match );
		    match = HTMLExtractor.deepCompareJSONArraysUnordered(edges, new JSONArray(expectedEdges));
		    if(!match){
		    	System.out.println("Edge list did not match!  result was: \n" + edges);
		    }
		    assertTrue( match );
		    
		} catch (IOException e) {
			e.printStackTrace();
			fail("IOException");
		} catch (Exception e) {
			e.printStackTrace();
			fail("Exception");
		}
	}
	
	/**
	 * Test with "46.183.221.58" sample data
	 */
	@Test
	public void test_46_183_221_58()
	{
		String entryName = "46.183.221.58";
		boolean localMode = true;
		String content;
		
		try {
			Map<String,String> pageContent = loadContent(entryName, localMode);
			content = pageContent.get("content");
			
			MalwareDomainListExtractor mdlExt = new MalwareDomainListExtractor(content);
			JSONObject obj = mdlExt.getGraph();
		    
		    //System.out.println(obj.toString(2));

		    JSONArray verts = obj.getJSONArray("vertices");
		    JSONArray edges = obj.getJSONArray("edges");
		    
		    String expectedVerts = "["+
		    		"    {"+
		    		"      'urlsUsed': ["+
		    		"        '46.183.221.58/snow/bot.exe',"+
		    		"        '46.183.221.58/we/bot.exe'"+
		    		"      ],"+
		    		"      'vertexType': 'malware',"+
		    		"      '_type': 'vertex',"+
		    		"      'source': 'MalwareDomainList',"+
		    		"      '_id': 'MalwareDomainList_46.183.221.58',"+
		    		"      'description': 'Trojan.Zbot',"+
		    		"      'name': 'MalwareDomainList_46.183.221.58',"+
		    		"      'date': '1407089400000'"+
		    		"    },"+
		    		"    {"+
		    		"      'vertexType': 'DNSName',"+
		    		"      '_type': 'vertex',"+
		    		"      'source': 'MalwareDomainList',"+
		    		"      '_id': 'ip-221-58.dataclub.biz.',"+
		    		"      'name': 'ip-221-58.dataclub.biz.',"+
		    		"      'description': 'ip-221-58.dataclub.biz.'"+
		    		"    },"+
		    		"    {"+
		    		"      'vertexType': 'ip',"+
		    		"      '_type': 'vertex',"+
		    		"      'source': 'MalwareDomainList',"+
		    		"      '_id': '46.183.221.58',"+
		    		"      'name': '46.183.221.58',"+
		    		"      'description': '46.183.221.58'"+
		    		"    },"+
		    		"    {"+
		    		"      'vertexType': 'Address',"+
		    		"      '_type': 'vertex',"+
		    		"      'source': 'MalwareDomainList',"+
		    		"      '_id': '46.183.221.58:80',"+
		    		"      'name': '46.183.221.58:80',"+
		    		"      'description': '46.183.221.58, port 80'"+
		    		"    }"+
			    	  "]";
		    String expectedEdges = "["+
		    		"    {"+
		    		"      '_type': 'edge',"+
		    		"      'outVType': 'malware',"+
		    		"      'source': 'MalwareDomainList',"+
		    		"      '_id': 'MalwareDomainList_46.183.221.58_to_46.183.221.58:80',"+
		    		"      '_outV': 'MalwareDomainList_46.183.221.58',"+
		    		"      '_label': 'communicatesWith',"+
		    		"      'inVType': 'address',"+
		    		"      '_inV': '46.183.221.58:80'"+
		    		"    },"+
		    		"    {"+
		    		"      '_type': 'edge',"+
		    		"      'outVType': 'address',"+
		    		"      'source': 'MalwareDomainList',"+
		    		"      '_id': '46.183.221.58:80_to_46.183.221.58',"+
		    		"      '_outV': '46.183.221.58:80',"+
		    		"      '_label': 'hasIP',"+
		    		"      'inVType': 'ip',"+
		    		"      '_inV': '46.183.221.58'"+
		    		"    },"+
		    		"    {"+
		    		"      '_type': 'edge',"+
		    		"      'reverse': true,"+
		    		"      'outVType': 'address',"+
		    		"      'source': 'MalwareDomainList',"+
		    		"      '_id': '46.183.221.58:80_to_ip-221-58.dataclub.biz.',"+
		    		"      '_outV': '46.183.221.58:80',"+
		    		"      '_label': 'hasDNSName',"+
		    		"      'inVType': 'DNSName',"+
		    		"      '_inV': 'ip-221-58.dataclub.biz.'"+
		    		"    }"+
			    	  "]";
		    
		    boolean match = HTMLExtractor.deepCompareJSONArraysUnordered(verts, new JSONArray(expectedVerts));
		    if(!match){
		    	System.out.println("Vertex list did not match!  result was: \n" + verts);
		    }
		    assertTrue( match );
		    match = HTMLExtractor.deepCompareJSONArraysUnordered(edges, new JSONArray(expectedEdges));
		    if(!match){
		    	System.out.println("Edge list did not match!  result was: \n" + edges);
		    }
		    assertTrue( match );
		    
		} catch (IOException e) {
			e.printStackTrace();
			fail("IOException");
		} catch (Exception e) {
			e.printStackTrace();
			fail("Exception");
		}
	}

	
	/**
	 * Test with "notes.art-partner.net" sample data
	 */
	@Test
	public void test_notes_art_partner_net()
	{
		String entryName = "notes.art-partner.net";
		boolean localMode = true;
		String content;
		
		try {
			Map<String,String> pageContent = loadContent(entryName, localMode);
			content = pageContent.get("content");
			
			MalwareDomainListExtractor mdlExt = new MalwareDomainListExtractor(content);
			JSONObject obj = mdlExt.getGraph();
		    
		    //System.out.println(obj.toString(2));

		    JSONArray verts = obj.getJSONArray("vertices");
		    JSONArray edges = obj.getJSONArray("edges");
		    
		    String expectedVerts = "["+
		    		"  {"+
		    		"    'urlsUsed': ["+
		    		"      'notes.art-partner.net/sm32',"+
		    		"      'notes.art-partner.net/sm64'"+
		    		"    ],"+
		    		"    'vertexType': 'malware',"+
		    		"    '_type': 'vertex',"+
		    		"    'source': 'MalwareDomainList',"+
		    		"    '_id': 'MalwareDomainList_notes.art-partner.net',"+
		    		"    'description': 'Trojan.StealRAT',"+
		    		"    'name': 'MalwareDomainList_notes.art-partner.net',"+
		    		"    'date': '1408675920000'"+
		    		"  },"+
		    		"  {"+
		    		"    'vertexType': 'DNSName',"+
		    		"    '_type': 'vertex',"+
		    		"    'source': 'MalwareDomainList',"+
		    		"    '_id': 'notes.art-partner.net',"+
		    		"    'registrant': 'Registrar Abuse Contact abuse@enom.com',"+
		    		"    'name': 'notes.art-partner.net',"+
		    		"    'description': 'notes.art-partner.net'"+
		    		"  },"+
		    		"  {"+
		    		"    'vertexType': 'DNSName',"+
		    		"    '_type': 'vertex',"+
		    		"    'source': 'MalwareDomainList',"+
		    		"    '_id': '62-76-188-80.clodo.ru.',"+
		    		"    'name': '62-76-188-80.clodo.ru.',"+
		    		"    'description': '62-76-188-80.clodo.ru.'"+
		    		"  },"+
		    		"  {"+
		    		"    'vertexType': 'ip',"+
		    		"    '_type': 'vertex',"+
		    		"    'source': 'MalwareDomainList',"+
		    		"    '_id': '62.76.188.80',"+
		    		"    'name': '62.76.188.80',"+
		    		"    'description': '62.76.188.80'"+
		    		"  },"+
		    		"  {"+
		    		"    'vertexType': 'Address',"+
		    		"    '_type': 'vertex',"+
		    		"    'source': 'MalwareDomainList',"+
		    		"    '_id': '62.76.188.80:80',"+
		    		"    'name': '62.76.188.80:80',"+
		    		"    'description': '62.76.188.80, port 80'"+
		    		"  }"+
			    	  "]";
		    String expectedEdges = "["+
		    		"  {"+
		    		"    '_type': 'edge',"+
		    		"    'outVType': 'malware',"+
		    		"    'source': 'MalwareDomainList',"+
		    		"    '_id': 'MalwareDomainList_notes.art-partner.net_to_62.76.188.80:80',"+
		    		"    '_outV': 'MalwareDomainList_notes.art-partner.net',"+
		    		"    '_label': 'communicatesWith',"+
		    		"    'inVType': 'address',"+
		    		"    '_inV': '62.76.188.80:80'"+
		    		"  },"+
		    		"  {"+
		    		"    '_type': 'edge',"+
		    		"    'outVType': 'address',"+
		    		"    'source': 'MalwareDomainList',"+
		    		"    '_id': '62.76.188.80:80_to_62.76.188.80',"+
		    		"    '_outV': '62.76.188.80:80',"+
		    		"    '_label': 'hasIP',"+
		    		"    'inVType': 'ip',"+
		    		"    '_inV': '62.76.188.80'"+
		    		"  },"+
		    		"  {"+
		    		"    '_type': 'edge',"+
		    		"    'reverse': false,"+
		    		"    'outVType': 'address',"+
		    		"    'source': 'MalwareDomainList',"+
		    		"    '_id': '62.76.188.80:80_to_notes.art-partner.net',"+
		    		"    '_outV': '62.76.188.80:80',"+
		    		"    '_label': 'hasDNSName',"+
		    		"    'inVType': 'DNSName',"+
		    		"    '_inV': 'notes.art-partner.net'"+
		    		"  },"+
		    		"  {"+
		    		"    '_type': 'edge',"+
		    		"    'reverse': true,"+
		    		"    'outVType': 'address',"+
		    		"    'source': 'MalwareDomainList',"+
		    		"    '_id': '62.76.188.80:80_to_62-76-188-80.clodo.ru.',"+
		    		"    '_outV': '62.76.188.80:80',"+
		    		"    '_label': 'hasDNSName',"+
		    		"    'inVType': 'DNSName',"+
		    		"    '_inV': '62-76-188-80.clodo.ru.'"+
		    		"  }"+
			    	  "]";
		    
		    boolean match = HTMLExtractor.deepCompareJSONArraysUnordered(verts, new JSONArray(expectedVerts));
		    if(!match){
		    	System.out.println("Vertex list did not match!  result was: \n" + verts);
		    }
		    assertTrue( match );
		    match = HTMLExtractor.deepCompareJSONArraysUnordered(edges, new JSONArray(expectedEdges));
		    if(!match){
		    	System.out.println("Edge list did not match!  result was: \n" + edges);
		    }
		    assertTrue( match );
		    
		} catch (IOException e) {
			e.printStackTrace();
			fail("IOException");
		} catch (Exception e) {
			e.printStackTrace();
			fail("Exception");
		}
	}

	
	/**
	 * Test with "www.toll-net.be" sample data
	 */
	@Test
	public void test_www_toll_net_be()
	{
		String entryName = "www.toll-net.be";
		boolean localMode = true;
		String content;
		
		try {
			Map<String,String> pageContent = loadContent(entryName, localMode);
			content = pageContent.get("content");
			
			MalwareDomainListExtractor mdlExt = new MalwareDomainListExtractor(content);
			JSONObject obj = mdlExt.getGraph();
		    
		    //System.out.println(obj.toString(2));

		    JSONArray verts = obj.getJSONArray("vertices");
		    JSONArray edges = obj.getJSONArray("edges");
		    
		    String expectedVerts = "["+
		    		"  {"+
		    		"    'urlsUsed': ["+
		    		"      'www.toll-net.be/images/stories/14814.c',"+
		    		"      'www.toll-net.be/images/stories/auto.txt',"+
		    		"      'www.toll-net.be/images/stories/bad.txt',"+
		    		"      'www.toll-net.be/images/stories/badjce.txt',"+
		    		"      'www.toll-net.be/images/stories/file.tar.gz',"+
		    		"      'www.toll-net.be/images/stories/files.tar.gz',"+
		    		"      'www.toll-net.be/images/stories/food.php',"+
		    		"      'www.toll-net.be/images/stories/index.inc.txt',"+
		    		"      'www.toll-net.be/images/stories/magic1.php',"+
		    		"      'www.toll-net.be/images/stories/magic2.php',"+
		    		"      'www.toll-net.be/images/stories/osco.txt',"+
		    		"      'www.toll-net.be/images/stories/ramk.txt',"+
		    		"      'www.toll-net.be/images/stories/root.c',"+
		    		"      'www.toll-net.be/images/stories/scan8.txt',"+
		    		"      'www.toll-net.be/images/stories/slowpost.txt',"+
		    		"      'www.toll-net.be/images/stories/sod.txt',"+
		    		"      'www.toll-net.be/images/stories/spender.tgz',"+
		    		"      'www.toll-net.be/images/stories/test.py',"+
		    		"      'www.toll-net.be/images/stories/udp.php',"+
		    		"      'www.toll-net.be/images/stories/vulns',"+
		    		"      'www.toll-net.be/images/stories/west.txt',"+
		    		"      'www.toll-net.be/images/stories/wp.txt'"+
		    		"    ],"+
		    		"    'vertexType': 'malware',"+
		    		"    '_type': 'vertex',"+
		    		"    'source': 'MalwareDomainList',"+
		    		"    '_id': 'MalwareDomainList_www.toll-net.be',"+
		    		"    'description': 'Exploit, Exploit.DOS, PHP.Flood, PHP.RemoteUploader.Shell, PHP.Shell, PHP.Shell.Proxy, PHP.Shells, PHP.Shells, PHP.IRCBots, Part of Perl.IRCBot, Part of vulnerability scanner, Perl.IRCBot, Perl.RFIScanner, Python.Scanner',"+
		    		"    'name': 'MalwareDomainList_www.toll-net.be',"+
		    		"    'date': '1408422840000'"+
		    		"  },"+
		    		"  {"+
		    		"    'vertexType': 'DNSName',"+
		    		"    '_type': 'vertex',"+
		    		"    'source': 'MalwareDomainList',"+
		    		"    '_id': 'www.toll-net.be',"+
		    		"    'registrant': 'Not shown, please visit www.dns.be for webbased whois. / support@hostbasket.com',"+
		    		"    'name': 'www.toll-net.be',"+
		    		"    'description': 'www.toll-net.be'"+
		    		"  },"+
		    		"  {"+
		    		"    'vertexType': 'DNSName',"+
		    		"    '_type': 'vertex',"+
		    		"    'source': 'MalwareDomainList',"+
		    		"    '_id': 'uu194-7-157-205.unknown.uunet.be.',"+
		    		"    'name': 'uu194-7-157-205.unknown.uunet.be.',"+
		    		"    'description': 'uu194-7-157-205.unknown.uunet.be.'"+
		    		"  },"+
		    		"  {"+
		    		"    'vertexType': 'ip',"+
		    		"    '_type': 'vertex',"+
		    		"    'source': 'MalwareDomainList',"+
		    		"    '_id': '194.7.157.205',"+
		    		"    'name': '194.7.157.205',"+
		    		"    'description': '194.7.157.205'"+
		    		"  },"+
		    		"  {"+
		    		"    'vertexType': 'Address',"+
		    		"    '_type': 'vertex',"+
		    		"    'source': 'MalwareDomainList',"+
		    		"    '_id': '194.7.157.205:80',"+
		    		"    'name': '194.7.157.205:80',"+
		    		"    'description': '194.7.157.205, port 80'"+
		    		"  }"+
			    	  "]";
		    String expectedEdges = "["+
		    		"  {"+
		    		"    '_type': 'edge',"+
		    		"    'outVType': 'malware',"+
		    		"    'source': 'MalwareDomainList',"+
		    		"    '_id': 'MalwareDomainList_www.toll-net.be_to_194.7.157.205:80',"+
		    		"    '_outV': 'MalwareDomainList_www.toll-net.be',"+
		    		"    '_label': 'communicatesWith',"+
		    		"    'inVType': 'address',"+
		    		"    '_inV': '194.7.157.205:80'"+
		    		"  },"+
		    		"  {"+
		    		"    '_type': 'edge',"+
		    		"    'outVType': 'address',"+
		    		"    'source': 'MalwareDomainList',"+
		    		"    '_id': '194.7.157.205:80_to_194.7.157.205',"+
		    		"    '_outV': '194.7.157.205:80',"+
		    		"    '_label': 'hasIP',"+
		    		"    'inVType': 'ip',"+
		    		"    '_inV': '194.7.157.205'"+
		    		"  },"+
		    		"  {"+
		    		"    '_type': 'edge',"+
		    		"    'reverse': false,"+
		    		"    'outVType': 'address',"+
		    		"    'source': 'MalwareDomainList',"+
		    		"    '_id': '194.7.157.205:80_to_www.toll-net.be',"+
		    		"    '_outV': '194.7.157.205:80',"+
		    		"    '_label': 'hasDNSName',"+
		    		"    'inVType': 'DNSName',"+
		    		"    '_inV': 'www.toll-net.be'"+
		    		"  },"+
		    		"  {"+
		    		"    '_type': 'edge',"+
		    		"    'reverse': true,"+
		    		"    'outVType': 'address',"+
		    		"    'source': 'MalwareDomainList',"+
		    		"    '_id': '194.7.157.205:80_to_uu194-7-157-205.unknown.uunet.be.',"+
		    		"    '_outV': '194.7.157.205:80',"+
		    		"    '_label': 'hasDNSName',"+
		    		"    'inVType': 'DNSName',"+
		    		"    '_inV': 'uu194-7-157-205.unknown.uunet.be.'"+
		    		"  }"+
			    	  "]";
		    
		    boolean match = HTMLExtractor.deepCompareJSONArraysUnordered(verts, new JSONArray(expectedVerts));
		    if(!match){
		    	System.out.println("Vertex list did not match!  result was: \n" + verts);
		    }
		    assertTrue( match );
		    match = HTMLExtractor.deepCompareJSONArraysUnordered(edges, new JSONArray(expectedEdges));
		    if(!match){
		    	System.out.println("Edge list did not match!  result was: \n" + edges);
		    }
		    assertTrue( match );
		    
		} catch (IOException e) {
			e.printStackTrace();
			fail("IOException");
		} catch (Exception e) {
			e.printStackTrace();
			fail("Exception");
		}
	}

	/**
	 * Test with the newest 10k records available.
	 */
	@Test
	public void test_newest_10k()
	{
		
		try {
			URL u = new URL("http://www.malwaredomainlist.com/mdl.php?inactive=&sort=Date&search=&colsearch=All&ascordesc=DESC&quantity=10000&page=0");
			String content = IOUtils.toString(u);
			
			MalwareDomainListExtractor mdlExt = new MalwareDomainListExtractor(content);
			JSONObject obj = mdlExt.getGraph();
		    
			//This test just grabs everything and combines it all, so the result won't be predictable (or useful)
			//However, since this is so much more data than usual, it's a very effective way to find errors in the extractor.
		    
		} catch (IOException e) {
			e.printStackTrace();
			fail("IOException");
		} catch (Exception e) {
			e.printStackTrace();
			fail("Exception");
		}
	}
}
